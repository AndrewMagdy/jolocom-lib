/*
require('source-map-support').install()

import * as fs from 'fs'
import * as path from 'path'
import * as colors from 'colors'
import * as yargs from 'yargs'
import * as yaml from 'js-yaml'
import * as jolocom from './'

const DEFAULT_CONFIG_PATH = path.join(__dirname, '..', '.jolocomrc')

export function assertConfigFile() {
  if (!fs.existsSync(DEFAULT_CONFIG_PATH)) {
    console.error('Could not find CLI configuration.')
    console.error('Please run', colors.bold('npm run cli -- setup --help'), 'for more info...')
    process.exit(1)
  }
}

export function setup({identity, seedPhrase}) {
  fs.writeFileSync(DEFAULT_CONFIG_PATH, JSON.stringify({
    appOwnerIdentity: identity,
    appOwnerSeedPhrase: seedPhrase
  }, null, 2))

  console.log('Jolocom CLI ready to go!')
  console.log(`= Config path: ${DEFAULT_CONFIG_PATH}`)
}

export async function deployContract({contractId: contractID, artifactFile, infoFile, constructorArgs}) {
  assertConfigFile()

  const {abi, unlinked_binary: unlinkedBinary} = JSON.parse(fs.readFileSync(artifactFile).toString())
  console.log(fs.readFileSync(infoFile).toString())
  const info = yaml.safeLoad(fs.readFileSync(infoFile).toString())

  const cliConfig = JSON.parse(fs.readFileSync(DEFAULT_CONFIG_PATH).toString())
  jolocom.initializeApp({
    appOwnerIdentity: cliConfig.appOwnerIdentity,
    appOwnerSeedPhrase: cliConfig.appOwnerSeedPhrase
  })

  const deployed = await (await jolocom.ethereum()).deployContract({
    contractID, abi, unlinkedBinary, info,
    contractConstructorArgs: constructorArgs
  })

  console.log('Contract successfully deployed!')
  console.log(`= Contract URL: ${cliConfig.appOwnerIdentity}/ethereum/contracts/${contractID}`)
  console.log(`= Contract address: ${deployed.address}`)
}

export function main() {
  // '--contract-id --artifact-file --info-file'
  const options = yargs
    .command('setup', 'Set up the Jolocom CLI to work with your gateway', {
      'identity': {
        description: 'The Identity Gateway URL you want to manage with with this CLI',
        demandOption: true
      },
      'seed-phrase': {
        description: 'The seed phrase of the user you want to interact as',
        demandOption: true
      }
    }, setup)
    .command('deploy-contract', 'Deploy a contract to Ethereum and store its info on an Identity Gateway', {
      'contract-id': {
        description: 'Contract ID used to refer to the contract when using it for calls or transactions',
        demandOption: true
      },
      'artifact-file': {
        description: 'Path to .json file generated by Truffle containing the contract\'s ABI and bytecode',
        demandOption: true
      },
      'info-file': {
        description: 'Path to .json or .yaml file containing human-readable info about the contract',
        demandOption: true
      },
      'constructor-args': {
        description: 'Arguments to pass to contract constructor',
        type: 'array',
        default: []
      }
    }, deployContract)
    .argv
}

if(require.main === module){
  process.on('unhandledRejection', (reason, p) => {
    console.log('Unhandled Rejection at: ', p, 'reason:', reason);
    // application specific logging, throwing an error, or other logic here
  });
  main();
}
*/
